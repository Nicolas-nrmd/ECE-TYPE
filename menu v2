#include <allegro.h>
#include <stdio.h>
#include <string.h>

#define MAX_PSEUDO 20

char pseudo[MAX_PSEUDO] = "";
int niveau_debloque = 1; // Niveau 1 d√©bloqu√© par d√©faut

BITMAP* fond_menu = NULL;

// Fonction pour dessiner du texte en "gros" avec duplication des pixels
void textout_gros(BITMAP* bmp, FONT* f, const char* txt, int x, int y, int color) {
    for (int dx = 0; dx < 2; dx++) {
        for (int dy = 0; dy < 2; dy++) {
            textout_centre_ex(bmp, f, txt, x + dx, y + dy, color, -1);
        }
    }
}

void dessiner_menu(int selection) {
    // Affichage de l'image de fond si charg√©e
    if (fond_menu)
        blit(fond_menu, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
    else
        clear_to_color(screen, makecol(0, 0, 0));

    int base_y = SCREEN_H / 2 - 120;

    textout_gros(screen, font, "--- MENU DU JEU ---", SCREEN_W / 2, base_y - 60, makecol(255, 255, 255));

    const char* options[] = {
        "1. Saisir pseudo",
        "2. Nouvelle partie",
        "3. Reprendre partie",
        "4. Niveau 1",
        "5. Niveau 2",
        "6. Niveau 3",
        "7. Raccourcis niveaux"
    };

    for (int i = 0; i < 7; i++) {
        int color = (i == selection) ? makecol(255, 255, 0) : makecol(255, 255, 255);

        char affichage[50];
        if ((i == 4 && niveau_debloque < 2) || (i == 5 && niveau_debloque < 3)) {
            sprintf(affichage, "%s üîí", options[i]);
        } else {
            strcpy(affichage, options[i]);
        }

        textout_gros(screen, font, affichage, SCREEN_W / 2, base_y + i * 35, color);
    }

    if (strlen(pseudo) > 0) {
        char msg[50];
        sprintf(msg, "Pseudo actuel : %s", pseudo);
        textout_centre_ex(screen, font, msg, SCREEN_W / 2, base_y + 270, makecol(0, 255, 0), -1);
    }
}

void saisir_pseudo() {
    clear_to_color(screen, makecol(0, 0, 0));
    textout_gros(screen, font, "Entrez votre pseudo (20 caracteres max):", SCREEN_W / 2, 100, makecol(255, 255, 255));
    char buffer[MAX_PSEUDO];
    int index = 0;

    while (!key[KEY_ENTER] && index < MAX_PSEUDO - 1) {
        if (keypressed()) {
            int k = readkey() & 0xff;
            if (k >= 32 && k <= 126) {
                buffer[index++] = k;
                buffer[index] = '\0';
            } else if (k == 8 && index > 0) {
                buffer[--index] = '\0';
            }
            clear_to_color(screen, makecol(0, 0, 0));
            textout_gros(screen, font, "Entrez votre pseudo:", SCREEN_W / 2, 100, makecol(255, 255, 255));
            textout_gros(screen, font, buffer, SCREEN_W / 2, 150, makecol(255, 255, 0));
        }
    }
    strcpy(pseudo, buffer);
}

int main() {
    allegro_init();
    install_keyboard();
    set_color_depth(32);
    set_gfx_mode(GFX_AUTODETECT_WINDOWED, 800, 600, 0, 0);

    fond_menu = load_bitmap("fond_menu.bmp", NULL);
    if (!fond_menu) {
        allegro_message("Erreur de chargement de l'image de fond !");
        return 1;
    }

    int choix = 0;

    while (!key[KEY_ESC]) {
        dessiner_menu(choix);

        if (key[KEY_DOWN]) {
            rest(150);
            choix = (choix + 1) % 7;
        }
        if (key[KEY_UP]) {
            rest(150);
            choix = (choix - 1 + 7) % 7;
        }
        if (key[KEY_ENTER]) {
            rest(200);
            switch (choix) {
                case 0:
                    saisir_pseudo();
                    break;
                case 1:
                    niveau_debloque = 1; // R√©initialise la progression
                    break;
                case 2:
                    niveau_debloque = 2; // Simule une sauvegarde avec niveau 2 d√©bloqu√©
                    break;
                case 3:
                    // Niveau 1 accessible
                    break;
                case 4:
                    if (niveau_debloque >= 2) {
                        // Acc√©der au niveau 2
                    }
                    break;
                case 5:
                    if (niveau_debloque >= 3) {
                        // Acc√©der au niveau 3
                    }
                    break;
                case 6:
                    // Raccourcis
                    break;
            }
        }

        rest(30);
    }

    destroy_bitmap(fond_menu);
    allegro_exit();
    return 0;
}
END_OF_MAIN();
