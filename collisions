#include <allegro.h>
#include <time.h>

#define LARGEUR_ECRAN 800
#define HAUTEUR_ECRAN 580
#define LARGEUR_DECOR 12521
#define HAUTEUR_DECOR 588
#define VITESSE_SCROLL 2
#define VITESSE_VAISSEAU 3
#define NB_VIES 3
#define MAX_TORPILLES 20

typedef struct {
    int x, y;
    int actif;
} Torpille;

Torpille torpilles[MAX_TORPILLES];

void tirer_torpille(int x, int y) {
    for (int i = 0; i < MAX_TORPILLES; i++) {
        if (!torpilles[i].actif) {
            torpilles[i].x = x;
            torpilles[i].y = y;
            torpilles[i].actif = 1;
            break;
        }
    }
}

int est_position_valide(int x, int y, BITMAP *collision, BITMAP *vaisseau) {
    for (int i = 0; i < vaisseau->w; i++) {
        for (int j = 0; j < vaisseau->h; j++) {
            int px = x + i;
            int py = y + j;
            if (px >= 0 && px < collision->w && py >= 0 && py < collision->h) {
                int couleur = getpixel(collision, px, py);
                if (couleur == makecol(0, 0, 0)) {
                    return 0; // Zone noire => collision
                }
            }
        }
    }
    return 1; // Zone blanche => valide
}

int main() {
    allegro_init();
    install_keyboard();
    set_color_depth(desktop_color_depth());
    set_gfx_mode(GFX_AUTODETECT_WINDOWED, LARGEUR_ECRAN, HAUTEUR_ECRAN, 0, 0);

    BITMAP *buffer = create_bitmap(LARGEUR_ECRAN, HAUTEUR_ECRAN);

    BITMAP *decor = load_bitmap("biome3.bmp", NULL);
    if (!decor) {
        allegro_message("Erreur : impossible de charger 'biome3.bmp'");
        return 1;
    }

    BITMAP *collision = load_bitmap("collision3.bmp", NULL);
    if (!collision) {
        allegro_message("Erreur : impossible de charger 'collision.bmp'");
        return 1;
    }

    BITMAP *vaisseau_img = load_bitmap("sousmarin2.bmp", NULL);
    if (!vaisseau_img) {
        allegro_message("Erreur : impossible de charger 'sousmarin2.bmp'");
        return 1;
    }

    BITMAP *torpille_img = load_bitmap("torpille.bmp", NULL);
    if (!torpille_img) {
        allegro_message("Erreur : impossible de charger 'torpille.bmp'");
        return 1;
    }

    int vaisseau_x = 100;
    int vaisseau_y = HAUTEUR_ECRAN / 2;
    int camera_x = 0;
    int vies = NB_VIES;
    int en_pause = 0;
    time_t debut_temps = time(NULL);

    for (int i = 0; i < MAX_TORPILLES; i++) {
        torpilles[i].actif = 0;
    }

    while (!key[KEY_ESC]) {
        if (key[KEY_P]) {
            rest(200);
            en_pause = !en_pause;
        }

        if (!en_pause) {
            int new_x = vaisseau_x;
            int new_y = vaisseau_y;

            if (key[KEY_RIGHT]) new_x += VITESSE_VAISSEAU;
            if (key[KEY_LEFT])  new_x -= VITESSE_VAISSEAU;
            if (key[KEY_UP])    new_y -= VITESSE_VAISSEAU;
            if (key[KEY_DOWN])  new_y += VITESSE_VAISSEAU;

            // Test de collision avec le décor
            if (est_position_valide(new_x, new_y, collision, vaisseau_img)) {
                vaisseau_x = new_x;
                vaisseau_y = new_y;
            }

            if (key[KEY_T]) {
                tirer_torpille(vaisseau_x + vaisseau_img->w, vaisseau_y + vaisseau_img->h / 2);
                rest(100); // anti-spam
            }

            camera_x += VITESSE_SCROLL;
            if (camera_x > (LARGEUR_DECOR - LARGEUR_ECRAN))
                camera_x = LARGEUR_DECOR - LARGEUR_ECRAN;

            // MAJ des torpilles
            for (int i = 0; i < MAX_TORPILLES; i++) {
                if (torpilles[i].actif) {
                    torpilles[i].x += 8;
                    if (torpilles[i].x > LARGEUR_DECOR)
                        torpilles[i].actif = 0;
                }
            }
        }

        // === AFFICHAGE ===
        blit(decor, buffer, camera_x, 0, 0, 0, LARGEUR_ECRAN, HAUTEUR_ECRAN);
        int vaisseau_aff_x = vaisseau_x - camera_x;
        masked_blit(vaisseau_img, buffer, 0, 0, vaisseau_aff_x, vaisseau_y, vaisseau_img->w, vaisseau_img->h);

        // Afficher les torpilles
        for (int i = 0; i < MAX_TORPILLES; i++) {
            if (torpilles[i].actif) {
                int tx = torpilles[i].x - camera_x;
                if (tx >= 0 && tx < LARGEUR_ECRAN) {
                    masked_blit(torpille_img, buffer, 0, 0, tx, torpilles[i].y, torpille_img->w, torpille_img->h);
                }
            }
        }

        int c = vaisseau_x * 100 / LARGEUR_DECOR;
        textprintf_ex(buffer, font, 350, 50, makecol(0, 0, 0), -1, "Niveau 1 : %d %%", c);

        int temps_ecoule = (int)(time(NULL) - debut_temps);
        textprintf_ex(buffer, font, LARGEUR_ECRAN - 120, 10, makecol(255, 255, 255), -1, "Temps: %ds", temps_ecoule);

        if (en_pause) {
            textprintf_centre_ex(buffer, font, LARGEUR_ECRAN / 2, HAUTEUR_ECRAN / 2, makecol(255, 0, 0), -1, "== PAUSE ==");
        }

        blit(buffer, screen, 0, 0, 0, 0, LARGEUR_ECRAN, HAUTEUR_ECRAN);
        rest(20);
    }

    // === LIBÉRATION MÉMOIRE ===
    destroy_bitmap(buffer);
    destroy_bitmap(decor);
    destroy_bitmap(collision);
    destroy_bitmap(vaisseau_img);
    destroy_bitmap(torpille_img);
    allegro_exit();
    return 0;
}
END_OF_MAIN();
